name: Go

on:
  push:
    branches:
      - '**'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: ^1.15

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.1
        with:
          minikube version: 'v1.18.1'
          kubernetes version: 'v1.20.2'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube
          sudo cp minikube /usr/local/bin && rm minikube

      - name: Start minikube
        run: |
          minikube start --wait=all
          minikube addons enable ingress

      - name: Install operators
        run: |
          sleep 10
          kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.17.0/crds.yaml
          sleep 10
          kubectl apply -f https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.17.0/olm.yaml
          sleep 10
          kubectl create namespace pgo
          kubectl apply -f https://raw.githubusercontent.com/CrunchyData/postgres-operator/v4.6.1/installers/kubectl/postgres-operator.yml
          sleep 10
          kubectl apply -f https://download.elastic.co/downloads/eck/1.4.0/all-in-one.yaml
          sleep 30

      - name: Create temp working dir
        run: |
          mkdir temp

      - name: Prepare random user
        run: |
          cd temp
          printf github > randomuser
          head -1 <(fold -w 20  <(tr -dc 'a-z' < /dev/urandom)) >> randomuser
          export KUB_TEMP_PREFIX=`cat randomuser`
          echo "New user prefix is" $KUB_TEMP_PREFIX
          export NGINX_NAMESPACE=kube-system
          echo "Use nginx namespace" $NGINX_NAMESPACE
          envsubst < ../.github/create_service_account.yaml > create_service_account.yaml
          cd ..

      - name: Create opa config
        run: |
          cd temp
          export KUB_TEMP_PREFIX=`cat randomuser`

          echo Create user on cluster
          kubectl apply -f create_service_account.yaml

          echo Export token
          kubectl -n $KUB_TEMP_PREFIX-namespace describe secret $(kubectl -n $KUB_TEMP_PREFIX-namespace get secret | (grep $KUB_TEMP_PREFIX-user || echo "$_") | awk '{print $1}') | grep token: | awk '{print $2}' > usertoken

          echo Export host

          cat ~/.kube/config | grep server | awk -F ' ' '{print $2}' > host

          echo Export ca

          cat ~/.minikube/ca.crt > ca.crt
          mv ca.crt ../configs/kubernetes_ca.crt

          export GH_KUBERNETES_HOST=`cat host`
          export GH_KUBERNETES_TOKEN=`cat usertoken`
          export GH_KUBERNETES_NAMESPACE=$KUB_TEMP_PREFIX-namespace

          cd ..
          cd configs

          echo Adapt opa config
          cp appconfig_github_actions.json appconfig_github_actions_temp.json
          envsubst < appconfig_github_actions_temp.json > appconfig_github_actions.json
          rm appconfig_github_actions_temp.json

          cd ..

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi

      - name: Build service
        run: |
          cd cmd/service
          go build -v ./...
          cd ../..

      - name: Test
        run: go test -v -coverpkg ./pkg/...,./cmd/... -coverprofile=profile.cov ./test/...
        env:
          ENV_GITHUB_ACTION: "TRUE"

      - uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: profile.cov

      - name: Clean up
        run: |
          cd temp
          echo Deleting kubernetes namespace
          export KUB_TEMP_PREFIX=`cat randomuser`
          kubectl delete namespace $KUB_TEMP_PREFIX-namespace
          kubectl delete rolebinding $KUB_TEMP_PREFIX-nginx-rolebinding -n kube-system
          kubectl delete clusterrole $KUB_TEMP_PREFIX-role
          kubectl delete clusterrole $KUB_TEMP_PREFIX-nginx-role
          cd ..
        if: ${{ always() }}